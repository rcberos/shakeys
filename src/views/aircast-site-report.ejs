<% include ./partials/header %>
<% include ./partials/navigation %>
	
	<!-- <button onclick="updatePieChart()">update</button> -->
	<div class="container">

		<div class="report-details">
			<h1 class="margin-bottom-30">Aircast Site Daily Report <span id="clock" class="clock">loading ...</span></h1>

			<div class="row">
				<div class="col-md-3">
					<label>Search Site</label>
					 <input type="text" class="form-control" placeholder="Search..." onkeyup="searchByName(this.value)" />
				</div>
				<div class="col-md-3">
					<label>Select Date to display the data</label>
					<input type="date" name="" class="form-control" onchange="console.log(this.value)">
				</div>
				<div class="col-md-3">
					<label>Sort By Location</label>
					<select class="form-control" id="select-by-group" onchange="showGroup(this.value)">
						<option selected="" disabled="">select site location</option>
						<option value="all">all sites</option>
					</select>	
				</div>
				<div class="col-md-3">
					<label>Change the graph</label>
					<div>
						<button class="btn btn-success" id="graph-pie" onclick="changeGraph('pie')">Individual</button>
						<button class="btn btn-primary" id="graph-bar" onclick="changeGraph('bar')">Group</button>	
					</div>
				</div>

			</div>
		</div>
		<div class="loader-div">
			<div class="loader">
			  <div class="loader__bar"></div>
			  <div class="loader__bar"></div>
			  <div class="loader__bar"></div>
			  <div class="loader__bar"></div>
			  <div class="loader__bar"></div>
			  <div class="loader__ball"></div>
			  <h2>Loading. wait lang...</h2>
			</div>
		</div>
		<div class="row margin-top-20">
				<div id="report-graph"></div>
				<div id="report-group" style="display: none;"><h1>Hey, im the graph that will show you the by group report</h1></div>	
		</div>
		
	</div>

	<div id="showModal" class="modal fade" role="dialog">
	  <div class="modal-dialog">
	    <div class="modal-content">
	      <div class="modal-header">
	        <h4 class="modal-title">Aircast Logs</h4>
	      </div>
	      <div class="modal-body">
	      	<div class="row">
	      		<div class="col-md-9">
	      			<div>
	      				<div id="label-container"></div>
	      				<div>
	      				<table class="table table-hover table-striped table-bordered margin-top-10">
	      					<tr>
	      						<th>Hour</th>
	      						<th>Minutes Active</th>
	      					</tr>
	      					<tbody id="status-overview"></tbody>
	      				</table>
	      				</div>	
	      			</div>
	      			
	      		</div>
	      		<div class="col-md-3">
	      			<label>Complete Logs</label>
	      			<div id="status-details"></div>
	      		</div>	
	      	</div>
	      </div>
	      <div class="modal-footer">
	        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
	      </div>
	    </div>

	  </div>
	</div>



	<script type="text/javascript">

		var hgs_rpiid  = [];
		var myPieChart = [];
		var counter = 0;
		var aircast_sites_data;
		var rpi_id_logs_list = [];
		var time_store_really_opens;
		var today = moment().format('YYYY-MM-DD');
		var time_now = moment().format('kk:mm:ss');


		if (!aircast_sites_data) {

			$.ajax({
				url: '/api/rpi-location',
				success: function(data) {
					aircast_sites_data = data;

					var locations = [];

					aircast_sites_data.forEach(function(item){
						
						if (locations.indexOf(item.Location) == -1 && item.isDeployed == 1) {
							locations.push(item.Location);
						}

					});

					locations.forEach(function(item){
						$('#select-by-group').append('<option value='+item+'>'+item+'</option>');
					})
					
					console.log(data);
					$(".loader-div").fadeOut();
					init();
				}
			});
		}

		function changeGraph(graph_type) {

			if (graph_type == 'pie') {

				$("#graph-pie").removeClass('btn-primary').addClass('btn-success');
				$("#graph-graph").removeClass('btn-success').addClass('btn-primary');
				$("#report-group").fadeOut(300,function(){
					$("#report-graph").fadeIn(300);
				});
			}else {
				$("#graph-graph").removeClass('btn-primary').addClass('btn-success');
				$("#graph-pie").removeClass('btn-success').addClass('btn-primary');
				$("#report-graph").fadeOut(300,function(){
					$("#report-group").fadeIn(300);
				});
			}
		}


		//get all the aircast tv data
		function getLogsData(rpi_id,toUpdate){

			var aircast_tv_data = {};
			aircast_tv_data.rpi_id = rpi_id;


			for (var i = 0; i < aircast_sites_data.length; i++) {
				if (rpi_id == aircast_sites_data[i].RpiID) {
					aircast_tv_data.aircast_name = aircast_sites_data[i].Room;
					aircast_tv_data.LastAlive = aircast_sites_data[i].LastAlive;
					aircast_tv_data.Location = aircast_sites_data[i].Location;
					break;
				}
			}

			var today = moment().format('YYYY-MM-DD');
			var start_date = moment(today+ ' 00:00:00').unix();
			var end_date = moment(today+ ' 23:59:59').unix();

			$.ajax({
				url: 'http://ec2-54-169-234-246.ap-southeast-1.compute.amazonaws.com/api/v0/aircast_tv_monitoring.php?RpiID='+rpi_id+'&StartDate='+start_date+'&EndDate='+end_date,
				success: function(data) {

					if (toUpdate) {
						rpi_id_logs_list = [];
					}

					removeDuplication(data,aircast_tv_data,toUpdate);

				},
				error: function(err) {
					console.log(err);
				}
			})

		}


		function removeDuplication(data,aircast_tv_data,toUpdate) {

			console.log('first-data', data,aircast_tv_data,toUpdate);

			var arr = [];

			for (var i = data.Logs.length-1; i > 0 ; i--) {
				var item_hour = data.Logs[i].Date.split(" ")[1].split(':')[0];
				var item_minutes = data.Logs[i].Date.split(" ")[1].split(':')[1];

				var item_to_push = item_hour+':'+item_minutes
				if (arr.indexOf(item_to_push) == -1) {
					arr.push(item_to_push);
				}
			}
				calculateUptime(data,arr,aircast_tv_data,toUpdate);
		}


		function calculateUptime(data,arr,aircast_tv_data,toUpdate){

			console.log('second-data', data,arr,aircast_tv_data,toUpdate);

			aircast_tv_data.openTime = data.OpenTime;
			aircast_tv_data.closeTime = data.CloseTime;

			var uptime_count = 0;
			var downtime_count = 0;
			
			var store_opening_hour = data.OpenTime;
			var store_closing_hour = data.CloseTime;
			var storeOpenHour = parseInt(data.OpenTime.split(':')[0]);
			var storeClosingHour = parseInt(data.CloseTime.split(':')[0]);
			var computed_hours_of_operation = Math.abs(storeClosingHour - storeOpenHour);
			var time_store_opens = 'never opened';
			var hoursActive = [];
			var hoursReallyActive = [];
			var current_time = time_now.split(':');

			
			

			for (var i = 0; i < arr.length; i++) {
					time_store_really_opens = arr[0];
					if (parseInt(arr[i].split(':')[0]) >= storeOpenHour) {
						time_store_opens = arr[i];
						console.log('hey, time store opens: ', time_store_opens);
						console.log('hey, time store opens: ', time_store_really_opens);
						break;
					}	
			}


			for (var i = 0; i < arr.length; i++) {
				hoursReallyActive.push(arr[i].split(':')[0]);
				if (parseInt(arr[i].split(':')[0]) >= storeOpenHour && parseInt(arr[i].split(':')[0]) <= storeClosingHour) {
					hoursActive.push(arr[i].split(':')[0]);
				}
			}

			// console.log(aircast_tv_data);

			var expected_time_to_render = (storeClosingHour * 60) - (((parseInt(current_time[0])*60) + parseInt(current_time[1])) + 1 );
			var minutes_tv_should_open = Math.abs(storeClosingHour - storeOpenHour) * 60;
			var minutes_tv_is_up = parseInt(hoursActive.length);
			var minutes_tv_is_down = getTheDowntime(time_store_opens,store_opening_hour,store_closing_hour,hoursReallyActive.length);
			var status_of_the_tv = getTheDowntime(time_store_opens,store_opening_hour,store_closing_hour,hoursReallyActive.length);
			console.log('status_of_the_tv' , status_of_the_tv);

			if (minutes_tv_is_down == 'never opened') {
				minutes_tv_is_down = 0;
			}

			var minutes_tv_to_render = minutes_tv_should_open - (minutes_tv_is_up + minutes_tv_is_down);

			if (expected_time_to_render != minutes_tv_to_render && status_of_the_tv != 'never opened' ) {
				var temp = Math.abs(minutes_tv_to_render - expected_time_to_render);
				console.log('temp: ' + temp);
				minutes_tv_is_down+=temp;
				minutes_tv_to_render = expected_time_to_render;
			}

			
			var aircast_percentage = {
				must_uptime: minutes_tv_should_open,
				uptime: minutes_tv_is_up,
				downtime: minutes_tv_is_down,
				remaining_time: minutes_tv_to_render,
				hoursReallyActive: hoursReallyActive.length
			}


			if (toUpdate) {
				updateChart(aircast_tv_data,aircast_percentage);

			}else {
				var t = [aircast_tv_data.rpi_id,data];
				rpi_id_logs_list.push(t);
				addGraphToDom(aircast_tv_data,aircast_percentage,time_store_opens);	

			}

		
		}


		function getTheDowntime(time_store_opens,store_opening_hour, store_closing_hour,hoursReallyActive){


			console.log('third-data', time_store_opens,store_opening_hour);


			if (time_store_opens != 'never opened') {

					var hour = parseInt(time_store_opens.split(':')[0])*60; 
					var mins = parseInt(time_store_opens.split(':')[1]);
					var storeOpensHour = parseInt(store_opening_hour.split(':')[0])*60;
					var storeOpensMins = parseInt(store_opening_hour.split(':')[1]);


					var time_left = (parseInt(time_store_opens.split(':')[0])*60) + parseInt(time_store_opens.split(':')[1]) - (parseInt(store_opening_hour.split(':')[0])*60) + parseInt(store_opening_hour.split(':')[1]);

					time_left = Math.abs(time_left);
					var hour_passed = (Math.floor(time_left/60))*60;
					var minutes_passed_temp  = ((time_left/60) % 1) * 60;
					var minutes_passed  = Math.floor(60 - ((time_left/60) % 1) * 60);

					return time_left;	
							
			} else {
				return time_store_opens;
			}

		}


		function addGraphToDom(aircast_tv_data,aircast_percentage,time_store_opens){

			

			console.log('fourth-data', aircast_tv_data,aircast_percentage,time_store_opens);

			var current_time_now = parseInt(time_now.split(":")[0])*60 + parseInt(time_now.split(":")[1]); // 650
			var site_opening_hour = parseInt(aircast_tv_data.openTime.split(':')[0]) * 60 + parseInt(aircast_tv_data.openTime.split(':')[1]); // 600
			var site_closing_hour = parseInt(aircast_tv_data.closeTime.split(':')[0]) * 60 + parseInt(aircast_tv_data.closeTime.split(':')[1]); // 1320

			var div = document.createElement("div");
			div.setAttribute('data-name', aircast_tv_data.aircast_name);
			div.setAttribute('data-location', aircast_tv_data.Location);
			div.className +="item margin-10 margin-bottom-10 well";

			if (time_store_really_opens == '' || time_store_really_opens == undefined) {
				time_store_really_opens = 'never opened';
			}

			var color = '';

			if (aircast_percentage.hoursReallyActive != 0) {
				color = 'green';
			}else {
				color = '';
			}

			var div1 = document.createElement("div");
			var lbl = document.createElement('label');
			lbl.id = 'data-label-'+aircast_tv_data.rpi_id;
			lbl.innerHTML = '<h4>'+aircast_tv_data.aircast_name +'</h4><small>Operation Hours: <br/>' + moment(today+' '+aircast_tv_data.openTime).format('hh a')+' - '+ moment(today+' '+aircast_tv_data.closeTime).format('hh a') +'</small><br/><small>aircast opened at: ' +tConvert(time_store_really_opens)+'</small><br/><small>Last Activity: ' +moment(aircast_tv_data.LastAlive).format('MMM DD, YY hh:mm a')+'</small><br/><small>Last Activity: '+moment(aircast_tv_data.LastAlive).fromNow() +'</small><br/><br/><small style="color: '+color+'">Hours of Uptime: '+convertMinsToHrsMins(aircast_percentage.hoursReallyActive) +' hour(s)</small><br/><small>Hours of Downtime: ' +convertMinsToHrsMins(aircast_percentage.downtime)+' hour(s)</small>';
			div1.appendChild(lbl);
			var span = document.createElement('div');
			span.innerHTML = '<button class="margin-bottom-10" onclick="viewStats('+aircast_tv_data.rpi_id+')">View Logs';
			div1.appendChild(span); 

			time_store_really_opens ='';


			var div2 = document.createElement("div");

			var canvas = document.createElement('canvas');
			canvas.id = "data-"+aircast_tv_data.rpi_id;
			canvas.width = 100;
			canvas.height = 100;
			div2.appendChild(canvas);

			div.appendChild(div1);
			div.appendChild(div2);

			var body = document.getElementById("report-graph");
			body.appendChild(div);

				var d = 'data-'+aircast_tv_data.rpi_id;
				var ctx = document.getElementById(d).getContext('2d');

				if (aircast_percentage.remaining_time < 0) {
					aircast_percentage.remaining_time = 0;
				}


				data = {
				    datasets: [{
				        data: [aircast_percentage.uptime, aircast_percentage.downtime, aircast_percentage.remaining_time],
				         backgroundColor: [
			                'rgba(50, 255, 50, 1)',
			                'rgba(255,50, 50, 1)',
			                'rgba(168,168,168,1)'
			            ],
			            borderWidth: 1
				    }],

				    // These labels appear in the legend and in the tooltips when hovering different arcs
				    labels: [
				        'Minutes of Uptime',
				        'Minutes of Downtime',
				        'Remaining time'

				    ], 
				    backgroundColor: [
	                'rgba(255, 99, 132, 0.2)',
	                'rgba(54, 162, 235, 0.2)',
	            ],
			};

			options = {
				legend: {
				    display: false,
				}
			}


				myPieChart[counter] = new Chart(ctx,{
				    type: 'doughnut',
				    data: data,
				    options: options
				});

				counter++;

		}

		function updatePieChart() {
			console.log('pressed');
			aircast_sites_data.forEach(function(item) {

				if (item.isDeployed == 1) {
					getLogsData(item.RpiID,true);	
				}


				// if (item.RpiID == 24 || item.RpiID == 30 || item.RpiID == 33 || item.RpiID == 31) {
				// 	getLogsData(item.RpiID,false);	
				// }
				
			})
		}

		function updateChart(aircast_tv_data,aircast_percentage) {


			myPieChart.forEach(function(item){

				if (item.canvas.id == 'data-'+aircast_tv_data.rpi_id) {

					item.config.data.datasets[0].data[0] = aircast_percentage.uptime;
					item.config.data.datasets[0].data[1] = aircast_percentage.downtime;
					item.config.data.datasets[0].data[2] = aircast_percentage.remaining_time;

					item.update();
				}
			});
		}


		function viewStats(rpi_id) {
			
			var today = moment().format('YYYY-MM-DD');
			var start_date = moment(today+ ' 00:00:00').unix();
			var end_date = moment(today+ ' 23:59:59').unix();

			$('#showModal').modal('show');
			$("#status-overview").html('');

			for (var i = 0; i < rpi_id_logs_list.length; i++) {

				if (rpi_id_logs_list[i][0] == rpi_id) {

					var data = rpi_id_logs_list[i][1];
					var str = '';
					var arr = [];
					var storeOpenHour = parseInt(data.OpenTime.split(':')[0]);
					var final_list = [];
					
					for (var i = data.Logs.length-1; i >= 0 ; i--) {


						var item_hour = data.Logs[i].Date.split(" ")[1].split(':')[0];
						var item_minutes = data.Logs[i].Date.split(" ")[1].split(':')[1];

						var item_to_push = item_hour+':'+item_minutes;

						if (arr.indexOf(item_to_push) == -1) {
							arr.push(item_to_push);
							str+=item_to_push+'<br/>';
						}
					}

					for (var i = 0; i < arr.length; i++) {
						if (parseInt(arr[i].split(':')[0])) {
							final_list.push(arr[i].split(':')[0]);
						}
					}

					var counts = {};
					final_list.forEach(function(x) { counts[x] = (counts[x] || 0)+1; });
					$("#label-container").html(($("#data-label-"+rpi_id).html()));

					for (var key in counts) {
					    if (counts.hasOwnProperty(key)) {
					    	$("#status-overview").append('<tr><td>'+convertTo12HourFormat(key) + '</td><td>'+counts[key]+' minutes</td></tr>')
					    }
					}

					$("#status-details").html(str);	
					break;


				}

			}

		}




		function init() {

			aircast_sites_data.forEach(function(item) {

				if (item.isDeployed == 1) {
					getLogsData(item.RpiID,false);	
				}

				// if (item.RpiID == 3 || item.RpiID == 49 || item.RpiID == 52 || item.RpiID == 51 || item.RpiID == 76) {
				// 	getLogsData(item.RpiID,false);	
				// }

				// if (item.RpiID == 24 || item.RpiID == 30 || item.RpiID == 33 || item.RpiID == 31 || item.RpiID == 3) {
				// 	getLogsData(item.RpiID,false);	
				// }
				
			})

		}


		function searchByName(keyword){

				$("#report-graph").children("div.item").each(function(){

					    // If the item does not contain the text phrase hide it
					    dataResult = $(this).is('[data-name*="'+keyword+'"]');
					    textResult = $(this).text().search(new RegExp(keyword, "i")) < 0;

					    if (textResult && !dataResult) {
					        $(this).closest(".item").fadeOut(700); // Hide the item if there are no matches

					    } else {
					        $(this).closest(".item").fadeIn(700); // Show the item if there are matches
					    }
					});
		}


		function showGroup(site_location) {


				if (site_location == 'all') {

					$("#report-graph").children("div.item").fadeIn(700);

				}else {

					$("#report-graph").children("div.item").each(function(){

					    // If the item does not contain the text phrase hide it
					    dataResult = $(this).is('[data-location*="'+site_location+'"]');
					    textResult = $(this).text().search(new RegExp(site_location, "i")) < 0;

					    if (textResult && !dataResult) {
					        $(this).closest(".item").fadeOut(700); // Hide the item if there are no matches

					    } else {
					        $(this).closest(".item").fadeIn(700); // Show the item if there are matches
					    }
					});

				}

				


				// $("#report-graph>div").fadeOut(300,function(){
				// 	$("#report-graph").find("[data-location='" + site_location + "']").fadeIn(300);	
				// });
					
		}



		function convertTo12HourFormat(hour) {

			if (parseInt(hour) > 12 ) {
				return parseInt(hour) - 12 + ' pm';
			}else {
				return hour + ' am';
			}
		}


		function convertMinsToHrsMins(minutes) {
		  var h = Math.floor(minutes / 60);
		  var m = minutes % 60;
		  h = h < 10 ? '0' + h : h;
		  m = m < 10 ? '0' + m : m;
		  return h + ':' + m;
		}


		function tConvert (time) {
			// console.log(time);
			if (time != 'never opened' && time != 'never openedNaN' && time != undefined) {
					// Check correct time format and split into components
				  time = time.toString ().match (/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

				  if (time.length > 1) { // If time format correct
				    time = time.slice (1);  // Remove full string match value
				    time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM
				    time[0] = +time[0] % 12 || 12; // Adjust hours
				  }
				  return time.join (''); // return adjusted time or original string
			}else {
				return time;
			}


		}



		function clock() {

			  //Save the times in variables

			  var today = new Date();

			  var hours = today.getHours();
			  var minutes = today.getMinutes();
			  var seconds = today.getSeconds();

			  //Set the AM or PM time

			  if (hours >= 12) {
			    meridiem = " PM";
			  } else {
			    meridiem = " AM";
			  }

			  //convert hours to 12 hour format and put 0 in front
			  if (hours > 12) {
			    hours = hours - 12;
			  } else if (hours === 0) {
			    hours = 12;
			  }

			  //Put 0 in front of single digit minutes and seconds

			  if (minutes < 10) {
			    minutes = "0" + minutes;
			  } else {
			    minutes = minutes;
			  }

			  if (seconds < 10) {
			    seconds = "0" + seconds;
			  } else {
			    seconds = seconds;
			  }

			  document.getElementById("clock").innerHTML = (hours + ":" + minutes + ":" + seconds + meridiem);

		}

		setInterval('clock()', 1000);




	</script>

<% include ./partials/footer %>